[gd_scene load_steps=23 format=3 uid="uid://dpqfykml07o3n"]

[ext_resource type="Texture2D" uid="uid://d3pegcd6x5ebg" path="res://bob crouch.png" id="1_f8gty"]
[ext_resource type="Texture2D" uid="uid://bbcq3osp1sq1c" path="res://bob.png" id="2_5orh2"]
[ext_resource type="Texture2D" uid="uid://ctd6ocwyvdctw" path="res://wind.png" id="3_0pv2t"]
[ext_resource type="Texture2D" uid="uid://dn240rb1wgd85" path="res://wind2.png" id="3_msv8w"]
[ext_resource type="Texture2D" uid="uid://cnopnk31uep8j" path="res://wind icon.png" id="4_dhdc6"]
[ext_resource type="AudioStream" uid="uid://cu7p3l0ernk1w" path="res://bounce sound.wav" id="10_nocpw"]
[ext_resource type="AudioStream" uid="uid://dtg12576kuqgd" path="res://footstep pixelated.wav" id="11_p8n06"]

[sub_resource type="GDScript" id="GDScript_e5i2b"]
script/source = "extends CharacterBody2D

@onready var sprite = $AnimatedSprite2D
@onready var particles = $\"Feet Point/CPUParticles2D\"
@onready var feetPoint = $\"Feet Point\"
@onready var chat = $\"..\"/Camera2D/CanvasLayer/Dialogue
@onready var postProcess = $\"..\"/Camera2D/PostProcess
@onready var blackFade = $\"..\"/Camera2D/CanvasLayer2/ColorRect
@onready var music = $\"..\"/Camera2D/Music
@onready var bounceSfx = $\"bounce sfx\"
@onready var footstep = $footstep
@onready var cam = $\"..\"/Camera2D
@onready var crouchHitbox = $Crouching
@onready var canStandRay = $CanStand
@onready var standingHitbox = $Standing
@onready var lastCheckPoint = position
@onready var jumpVelocity = defaultJumpVelocity
@onready var speed = defaultSpeed
@onready var dashParticle = $AnimatedSprite2D/CPUParticles2D
@onready var dashIndicator = $AnimatedSprite2D/Icon

@export var maxDashTime = 0.25
@export var maxDashCooldown = 2.0
@export var experimentalDash = false
@export var noLoadCheckpoint = false
@export var defaultJumpVelocity = 160.0
@export var crouchJumpVelocity = 40.0
@export var defaultSpeed = 80.0
@export var crouchSpeed = 25.0
@export var dashSpeed = 120.0
@export var dashingLineEffectAmount = 0.056
@export var slide = true
@export var movementAccel = 28
@export var slidingDecelleration = 4.0
@export var canSlide = true
@export var slideSpeed = 160.0

var noMusic = false
var canJumpCancel = true
var dashing = false
var canEnterMenu = true
var direction = 0.0
var speedLerpAmount = 4
var cooldownCompleted = false
var jumpTime = 0
var defaultJumpTime = 0.2
var jumped = false
var canCoyote = false
var justFell = false
var transition = false
var crouching = false
var knownTransition = false
var visibleColor = Color(1.0, 1.0, 1.0, 1.0)
var jumpCancel = false
var invisibleColor = Color(1.0, 1.0, 1.0, 0.0)
var moving = false
var coyoteJump = false
var dashCooldown = 0.0
var footstepTimer = 0.25
var zoomAmount = null
var timer2 = 0.0
var beganDash = false
var coyoteTime = 0
var dashTime = 0.0
var defaultCoyoteTime = 0.1
var canDie = true
var path = \"user://lastPosPlatformerX\"
var path2 = \"user://lastPosPlatformerY\"
var path3 = \"user://lastUpDirectionY\"
var path4 = \"user://musicAllowed\"
var path5 = \"user://jumpCancelAllowed\"
var canResume = true
var lastMusicVolume = []
var setThing = false

func stopMusic():
	if canResume == false: return
	for i: AudioStreamPlayer in music.get_children():
		if setThing == false: lastMusicVolume.append(i.volume_db)
		i.volume_db = -80.0
	setThing = true

func deafenMusic():
	if noMusic == true: return
	if canResume == false: return
	for i: AudioStreamPlayer in music.get_children():
		var tween = get_tree().create_tween()
		if setThing == false: lastMusicVolume.append(i.volume_db)
		tween.tween_property(i, \"volume_db\", -7.0, 1.5)
	setThing = true

func deafenMusicNow():
	if noMusic == true: return
	if canResume == false: return
	for i: AudioStreamPlayer in music.get_children():
		if setThing == false: lastMusicVolume.append(i.volume_db)
		i.volume_db = -12.0
	setThing = true

func normalizeMusic():
	if noMusic == true: return
	if canResume == false or setThing == false: return
	var number = 0
	for i: AudioStreamPlayer in music.get_children():
		var tween = get_tree().create_tween()
		tween.tween_property(i, \"volume_db\", lastMusicVolume[number], 1.5)
		number += 1

func normalizeMusicNow():
	if noMusic == true: return
	if canResume == false or setThing == false: return
	var number = 0
	for i: AudioStreamPlayer in music.get_children():
		i.volume_db = lastMusicVolume[number]
		number += 1

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")

func saveCheckpoint(pos):
	lastCheckPoint = pos
	saveData()

# Loads the checkpoint data.
func loadData():
	if FileAccess.file_exists(path) and FileAccess.file_exists(path2) and FileAccess.file_exists(path4) and FileAccess.file_exists(path5):
		var file = FileAccess.open(path, FileAccess.READ)
		var file2 = FileAccess.open(path2, FileAccess.READ)
		var file3 = FileAccess.open(path4, FileAccess.READ)
		var file4 = FileAccess.open(path5, FileAccess.READ)
		
		position.x = file.get_double()
		position.y = file2.get_double()
		if !noLoadCheckpoint: lastCheckPoint = position
		canJumpCancel = file4.get_var()
		noMusic = file3.get_var()

# Saves checkpoint position if it changed, may be changed later.
func saveData():
	var file = FileAccess.open(path, FileAccess.WRITE)
	var file2 = FileAccess.open(path2, FileAccess.WRITE)
	var file3 = FileAccess.open(path4, FileAccess.WRITE)
	var file4 = FileAccess.open(path5, FileAccess.WRITE)
	
	file.store_double(lastCheckPoint.x)
	file2.store_double(lastCheckPoint.y)
	file3.store_var(noMusic)
	file4.store_var(canJumpCancel)
	
# Runs whenever a notification is made to the engine, deals with saving data before handling quit requests.
func _notification(what):
	if what == NOTIFICATION_WM_CLOSE_REQUEST:
		saveUpDirection()
		saveData()
		get_tree().quit()

func saveUpDirection():
	var file = FileAccess.open(path3, FileAccess.WRITE)
	file.store_float(up_direction.y)

func loadUpDirection():
	if noLoadCheckpoint == true: return
	if FileAccess.file_exists(path3):
		var file = FileAccess.open(path3, FileAccess.READ)
		up_direction.y = file.get_float()
		if is_equal_approx(up_direction.y, 1.0):
			rotation = deg_to_rad(180.0)
			sprite.flip_h = true

# Runs whenever an object is loaded, then loads data and sets some variables.
func _ready():
	if !experimentalDash:
		dashIndicator.visible = false
	else:
		dashIndicator.visible = true
	dashCooldown = maxDashCooldown
	loadData()
	loadUpDirection()
	if noMusic == true:
		stopMusic()
	chat.visible = false
	sprite.play(\"idle\")
	blackFade.visible = true
	var tween = get_tree().create_tween()
	var color2 = Color(0, 0, 0, 0)
	tween.tween_property(blackFade, \"modulate\", color2, 2.0)

# Kills the player if they can die.
func die():
	if canDie == false: return
	var lastSpeed = speed
	speed = 0.0
	canDie = false
	blackFade.visible = true
	var tween = get_tree().create_tween()
	var color2 = Color(0, 0, 0, 1)
	tween.tween_property(blackFade, \"modulate\", color2, 0.5)
	await tween.finished
	velocity = Vector2(0.0, 0.0)
	position = lastCheckPoint
	tween = get_tree().create_tween()
	color2 = Color(0, 0, 0, 0)
	tween.tween_property(blackFade, \"modulate\", color2, 0.5)
	await tween.finished
	speed = lastSpeed
	# Old await, uncomment it if you want to have longer death immunity.
	#await get_tree().create_timer(0.1).timeout
	canDie = true
	
# Runs whenever a event happens with an input (like releasing or pressing an input).
func _input(_event):
	# Deals with coyote time and jump buffering.
	if (Input.is_action_just_pressed(\"jump\") or Input.is_action_just_pressed(\"up\")) and chat.visible == false:
		if justFell == true and jumped == false and coyoteTime > 0:
			bounceSfx.play()
			velocity.y = -(-up_direction.y * jumpVelocity)
			jumped = true
			jumpCancel = true
			coyoteTime = 0
			jumpTime = 0
		elif is_on_floor():
			jumpCancel = true
			jumped = true
			jumpTime = defaultJumpTime
		else:
			jumped = true
			jumpTime = defaultJumpTime
	
# Runs every frame.
func _process(delta):
	# If the music option in the settings is disabled, mute the music, this does not disable the music script/logic.
	if noMusic: stopMusic()
		
	if timer2 > 0.0: timer2 -= delta
	
	if transition == true and knownTransition == false:
		knownTransition = true
	
	# Handels the left and right direction.
	var directionX = (-Input.get_action_strength(\"left\") + Input.get_action_strength(\"right\")) * -up_direction.y
	
	# If the player is crouched, change the collisions and vars like how high you can jump or how fast you are.
	if Input.is_action_pressed(\"crouch\") and !is_equal_approx(0.0, Engine.time_scale) and dashing == false:
		if !crouching and is_on_floor() and canSlide:
			if !is_equal_approx(directionX, 0.0):
				speed = slideSpeed
		sprite.play(\"crouch\")
		jumpVelocity = crouchJumpVelocity
		crouching = true
		standingHitbox.disabled = true
		crouchHitbox.disabled = false
		speed = lerp(speed, crouchSpeed, delta * slidingDecelleration)
	
	# Change things to default if not crouching.
	elif !canStandRay.is_colliding() and !is_equal_approx(0.0, Engine.time_scale) and dashing == false:
		if moving == true:
			sprite.play(\"walk\")
		else:
			sprite.play(\"idle\")
		jumpVelocity = defaultJumpVelocity
		speed = defaultSpeed
		crouching = false
		standingHitbox.disabled = false
		crouchHitbox.disabled = true
	
	
	# Deals with removing jump time.
	if jumpTime > 0: jumpTime -= delta
	
	# Adds gravity.
	if !is_on_floor():
		velocity += -up_direction * gravity * delta
	
	# Sees if you fell and did not jump, for coyote time.
	if !is_on_floor() and jumped == false:
		justFell = true
	
	# If you landed and did not jump, registers you as not falling.
	elif is_on_floor() and !Input.is_action_just_pressed(\"jump\") and !Input.is_action_just_pressed(\"up\"):
		justFell = false
	
	# If you did not press the jump button and you are on the floor, then sets jumped to false.
	if is_on_floor() and !Input.is_action_just_pressed(\"jump\") and !Input.is_action_just_pressed(\"up\"):
		jumpCancel = false
		jumped = false
	
	if jumpCancel and canJumpCancel and velocity.y < 0.0 and (!is_on_floor() or (Input.is_action_just_pressed(\"jump\") or Input.is_action_just_pressed(\"up\"))) and (Input.is_action_just_released(\"jump\") or (Input.is_action_just_released(\"up\"))):
		jumpCancel = false
		velocity.y = 0.0
	
	elif !jumpCancel:
		if !canJumpCancel:
			if !velocity.y < 0.0:
				if !(!is_on_floor() or (Input.is_action_just_pressed(\"jump\") or Input.is_action_just_pressed(\"up\"))):
					jumpCancel = false
	
	# Deals with coyote time.
	if !is_on_floor():
		if coyoteTime > 0:
			coyoteTime = coyoteTime - delta
	
	else:
		coyoteTime = defaultCoyoteTime
	
	
	# Deals with emitting particles depending on conditions and deals with flipping sprites.
	if not is_equal_approx(0.0, directionX) and chat.visible == false and !is_equal_approx(0.0, speed) and !is_equal_approx(0.0, Engine.time_scale):
		if is_on_floor() and !crouching: particles.emitting = true
		else: particles.emitting = false
		
		if directionX < 0.0:
			if up_direction.is_equal_approx(Vector2.DOWN):
				sprite.flip_h = false
			else:
				sprite.flip_h = true
			particles.direction = Vector2(-1, particles.direction.y)
		
		elif directionX > 0.0: 
			if up_direction.is_equal_approx(Vector2.DOWN):
				sprite.flip_h = true
			else:
				sprite.flip_h = false
			particles.direction = Vector2(-1, particles.direction.y)
		
		if moving == false:
			if !crouching: sprite.play(\"walk\")

		moving = true
	
	else:
		if moving == true:
			if !crouching: sprite.play(\"idle\")

		moving = false
		particles.emitting = false
	
	# Sets direction in different ways depending on vars.
	if slide and !chat.visible and !transition: direction = lerp(direction, directionX, delta * movementAccel)
	elif !chat.visible and !transition: direction = directionX
	else:
		if !slide: 
			direction = 0.0
		else:
			lerp(direction, 0.0, delta * movementAccel)
			
	
	# If you just dashed, start the dash logic.
	if Input.is_action_just_pressed(\"dash\") and dashCooldown <= 0.0 and !crouching and experimentalDash and direction:
		var tween = get_tree().create_tween()
		tween.set_trans(Tween.TRANS_LINEAR)
		tween.tween_property(dashIndicator, \"modulate:a\", 0.0, maxDashTime)
		
		dashTime = maxDashTime
		dashCooldown = maxDashCooldown
		dashing = true
		cooldownCompleted = false
		beganDash = true
		dashParticle.emitting = true
	
	# If \"dashTime\" is greater than 0.0, minus it by delta.
	if dashTime > 0.0: dashTime -= delta
	
	# If \"dashTime\" reaches 0.0, start the cooldown process.
	if dashTime <= 0.0 and dashing:
		dashParticle.emitting = false
		dashing = false
	
	# Lowers the cooldown if you are not dashing.
	if dashCooldown > 0.0 and !dashing: dashCooldown -= delta
	
	# Tweens visibility of the dash indicator.
	if dashCooldown <= 0.4 and dashTime <= 0.0 and !dashing and !cooldownCompleted:
		cooldownCompleted = true
		
		var tween = get_tree().create_tween().set_ease(Tween.EASE_OUT)
		tween.set_trans(Tween.TRANS_LINEAR)
		tween.tween_property(dashIndicator, \"modulate:a\", 1.0, 0.4)
	
	# If you are dashing, change the direction depending on if the sprite is flipped.
	if dashing == true and dashTime > 0.0:
		if !sprite.flip_h: velocity.x = dashSpeed
		else: velocity.x = -dashSpeed
		
	# Deals with moving depending on the direction.
	if (direction < -0.1 or direction > 0.1) and !dashing:
		if timer2 <= 0.0 and is_on_floor() and !crouching:
			timer2 = footstepTimer
			footstep.play()
		velocity.x = direction * speed
	elif !dashing:
		velocity.x = move_toward(velocity.x, 0, speed)
	
	# Makes the player jump if the player is on the floor when jump time is greater than 0, basically jump buffering.
	if is_on_floor() and jumpTime > 0 and chat.visible == false and transition == false:
		jumped = true
		jumpCancel = true
		bounceSfx.play()
		velocity.y = -(-up_direction.y * jumpVelocity)
		jumpTime = 0
	
	# Everything below this does some math to add speed lines whenever moving quickly or dashing.
	var velocityLines = velocity
	
	if velocity.x < 0: velocityLines.x = -velocity.x
	else: velocityLines.x = velocity.x
	
	if velocity.y < 0: velocityLines.y = -velocity.y
	else: velocityLines.y = velocity.y
	
	var velocityTotalY = velocityLines.y
	var velocityTotalX = velocityLines.x
	
	velocityTotalY = velocityTotalY / 10000
	velocityTotalX = velocityTotalX / 10000
	
	if velocityTotalY < 0.01: velocityTotalY = 0.0
	if velocityTotalX < 0.01: velocityTotalX = 0.0
	
	var velocityTotal = velocityTotalX + velocityTotalY
	
	velocityTotal = clamp(velocityTotal, 0.0, 0.0675)
	
	if postProcess:
		var config = postProcess.configuration
		if !dashing: config.SpeedLineDensity = lerp(config.SpeedLineDensity, velocityTotal, delta * speedLerpAmount)
		else:
			config.SpeedLineDensity = lerp(config.SpeedLineDensity, dashingLineEffectAmount, delta * speedLerpAmount * 1.5)
		
	
	# Ends the function and does physics and velocity (I think).
	move_and_slide()
"

[sub_resource type="AtlasTexture" id="AtlasTexture_t8ykk"]
atlas = ExtResource("2_5orh2")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_opmii"]
atlas = ExtResource("2_5orh2")
region = Rect2(16, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_x6q8t"]
atlas = ExtResource("2_5orh2")
region = Rect2(0, 16, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_65knr"]
atlas = ExtResource("2_5orh2")
region = Rect2(16, 16, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_8h4gi"]
atlas = ExtResource("2_5orh2")
region = Rect2(0, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_58xlv"]
atlas = ExtResource("2_5orh2")
region = Rect2(16, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_8m5w5"]
atlas = ExtResource("2_5orh2")
region = Rect2(0, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_req86"]
atlas = ExtResource("2_5orh2")
region = Rect2(16, 48, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_i3fjf"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_f8gty")
}],
"loop": true,
"name": &"crouch",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_t8ykk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_opmii")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_x6q8t")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_65knr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8h4gi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_58xlv")
}],
"loop": true,
"name": &"idle",
"speed": 4.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_8m5w5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_req86")
}],
"loop": true,
"name": &"walk",
"speed": 5.5
}]

[sub_resource type="Gradient" id="Gradient_el3w6"]
interpolation_mode = 2
offsets = PackedFloat32Array(0, 0.366667, 0.586667, 1)
colors = PackedColorArray(1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0.974049, 1, 1, 1, 0)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ljnnu"]
size = Vector2(9, 14)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_58oh4"]
size = Vector2(9, 6)

[sub_resource type="Gradient" id="Gradient_oqblb"]
colors = PackedColorArray(1, 1, 1, 1, 0.241156, 0.241156, 0.241156, 0)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_vfpae"]
size = Vector2(7.965, 9.055)

[node name="Player" type="CharacterBody2D" groups=["Player"]]
script = SubResource("GDScript_e5i2b")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
texture_filter = 1
texture_repeat = 1
sprite_frames = SubResource("SpriteFrames_i3fjf")
animation = &"idle"

[node name="CPUParticles2D" type="CPUParticles2D" parent="AnimatedSprite2D"]
modulate = Color(1, 1, 1, 0.592157)
emitting = false
amount = 46
lifetime = 2.0
texture = ExtResource("3_msv8w")
emission_shape = 3
emission_rect_extents = Vector2(5.285, 6.885)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 2.8
initial_velocity_max = 2.8
angular_velocity_min = -12.75
angular_velocity_max = 12.75
linear_accel_min = 2.0
linear_accel_max = 2.0
scale_amount_min = 0.38
scale_amount_max = 0.38
color_ramp = SubResource("Gradient_el3w6")

[node name="Icon" type="Sprite2D" parent="AnimatedSprite2D"]
visible = false
z_index = 21
position = Vector2(0, 13)
scale = Vector2(0.535, 0.535)
texture = ExtResource("4_dhdc6")

[node name="Standing" type="CollisionShape2D" parent="."]
visible = false
position = Vector2(-0.5, 1)
shape = SubResource("RectangleShape2D_ljnnu")

[node name="Crouching" type="CollisionShape2D" parent="."]
visible = false
position = Vector2(-0.5, 5)
shape = SubResource("RectangleShape2D_58oh4")
disabled = true

[node name="Feet Point" type="Marker2D" parent="."]
position = Vector2(0, 7)

[node name="CPUParticles2D" type="CPUParticles2D" parent="Feet Point"]
texture_filter = 1
texture_repeat = 1
emitting = false
amount = 4
lifetime = 1.5
texture = ExtResource("3_0pv2t")
emission_shape = 3
emission_rect_extents = Vector2(1, 1)
direction = Vector2(-1, -0.135)
gravity = Vector2(0, 0)
initial_velocity_min = 15.2
initial_velocity_max = 15.2
angular_velocity_min = -20.0
angular_velocity_max = 20.0
linear_accel_max = 0.5
scale_amount_min = 0.3
scale_amount_max = 0.6
color_ramp = SubResource("Gradient_oqblb")

[node name="bounce sfx" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("10_nocpw")
volume_db = -1.82

[node name="footstep" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("11_p8n06")

[node name="CanStand" type="ShapeCast2D" parent="."]
visible = false
position = Vector2(-0.49, 3)
shape = SubResource("RectangleShape2D_vfpae")
target_position = Vector2(0, -4.84)
